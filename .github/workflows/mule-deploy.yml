name: Mulesoft CloudHub 2.0 Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for re-deployment'
        required: true
        default: 'Manual re-deployment'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up JDK 8 and Maven 3.8.6
      uses: actions/setup-java@v2
      with:
        java-version: '8'
        distribution: 'adopt'
        maven-version: '3.8.6'
        
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Capture Deployment Output
      id: deploy
      env:
        ANYPOINT_USERNAME: ${{ secrets.ANYPOINT_USERNAME }}
        ANYPOINT_PASSWORD: ${{ secrets.ANYPOINT_PASSWORD }}
      run: |
        # Install AnypointCLI
        npm install -g anypoint-cli-v4
        
        # Login to Anypoint
        anypoint-cli-v4 account:login --username="${ANYPOINT_USERNAME}" --password="${ANYPOINT_PASSWORD}"
        
        # First build the app
        mvn clean package
        
        # Then deploy with CLI (which doesn't need the problematic dependencies)
        anypoint-cli-v4 runtime-mgr:cloudhub2-application deploy \
          ${project.artifactId} Sandbox Cloudhub-US-East-2 \
          ./target/${project.artifactId}-${project.version}-mule-application.jar \
          --runtime 4.4.0 --replicas 1 --cpu 0.1
      
    - name: Process Deployment Result
      run: |
        if [[ "${{ steps.deploy.outcome }}" == "success" ]]; then
          echo "✅ Deployment successful!"
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            gh pr comment ${{ github.event.pull_request.number }} --body "✅ Deployment to CloudHub 2.0 Sandbox environment was successful."
          fi
        else
          echo "❌ Deployment failed. Error message:"
          ERROR_MSG=$(echo "${{ steps.deploy.outputs.deploy_output }}" | grep -oP '(?<=ERROR).*' | head -1)
          echo $ERROR_MSG
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            gh pr comment ${{ github.event.pull_request.number }} --body "❌ Deployment to CloudHub 2.0 Sandbox environment failed. Error: $ERROR_MSG"
          fi
          exit 1
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Notify Deployment Status
      if: always()
      uses: actions/github-script@v4
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const { owner, repo } = context.repo;
          const ref = context.sha;
          
          let state = 'success';
          let description = 'Deployment successful';
          
          if (${{ steps.deploy.outputs.exit_code }} != 0) {
            state = 'failure';
            description = 'Deployment failed';
          }
          
          github.repos.createCommitStatus({
            owner,
            repo,
            sha: ref,
            state: state,
            description: description,
            context: 'CloudHub 2.0 Deployment'
          });
